import time
import logging
from telebot import TeleBot, types

from bot.states import AddWordStates
from database.db import Database
from bot.utils import show_next_card
from bot.keyboards import welcome_keyboard

logger = logging.getLogger(__name__)


def register_handlers(bot: TeleBot, db: Database):
    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.clear_user_state(user_id)

        welcome_text = (
                "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
                "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n\n"
                "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:\n"
                "- –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\n"
                "- –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô\n\n"
                "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ ‚ñ∂Ô∏è"))

        bot.send_message(chat_id, welcome_text, reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ ‚ñ∂Ô∏è")
    def start_learning(message: types.Message):
        db.clear_user_state(message.from_user.id)
        show_next_card(bot, message, db)

    @bot.message_handler(func=lambda m: m.text == "–î–∞–ª—å—à–µ ‚è≠")
    def next_card_handler(message: types.Message):
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–î–∞–ª—å—à–µ ‚è≠"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
                message.chat.id,
                "–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É...",
                reply_markup=markup
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        show_next_card(bot, message, db)

    @bot.message_handler(func=lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï")
    def add_word_start(message: types.Message):
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞
        db.clear_user_state(message.from_user.id)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:")
        bot.set_state(message.from_user.id, AddWordStates.english, message.chat.id)

    @bot.message_handler(state=AddWordStates.english)
    def add_word_english(message: types.Message):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['english'] = message.text

        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")
        bot.set_state(message.from_user.id, AddWordStates.russian, message.chat.id)

    @bot.message_handler(state=AddWordStates.russian)
    def add_word_russian(message: types.Message):
        user_id = message.from_user.id
        chat_id = message.chat.id

        with bot.retrieve_data(user_id, chat_id) as data:
            english = data.get('english', '').strip()
            russian = message.text.strip()

            if not english or not russian:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥")
                return

            if db.add_word(user_id, english, russian):
                bot.send_message(chat_id, f"–°–ª–æ–≤–æ '{english}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            else:
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot.delete_state(user_id, chat_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        show_next_card(bot, message, db)

    @bot.message_handler(func=lambda m: m.text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô")
    def delete_word_handler(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id

        state = db.get_user_state(user_id)
        if not state or state.current_word_id <= 0:
            bot.send_message(chat_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            show_next_card(bot, message, db)
            return

        word = db.get_word_by_id(state.current_word_id)
        if not word:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            show_next_card(bot, message, db)
            return

        if not word.is_custom:
            bot.send_message(
                    chat_id,
                    "‚õî –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å!\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–∞–º–∏."
            )
            show_next_card(bot, message, db)
            return

        if db.delete_word(user_id, state.current_word_id):
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        show_next_card(bot, message, db)

    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def handle_answer(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        user_answer = message.text

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if user_answer in ["–î–∞–ª—å—à–µ ‚è≠", "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï", "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô", "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ ‚ñ∂Ô∏è"]:
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–î–∞–ª—å—à–µ ‚è≠"))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = db.get_user_state(user_id)
        if not state or state.current_word_id <= 0:
            bot.send_message(
                    chat_id,
                    "–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ ‚è≠' –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏",
                    reply_markup=markup
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        word = db.get_word_by_id(state.current_word_id)
        if not word:
            bot.send_message(
                    chat_id,
                    "–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ ‚è≠'",
                    reply_markup=markup
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if user_answer == word.english:
            response = f"{user_answer} ‚úÖ"
        else:
            response = f"{user_answer} ‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {word.english}"

        bot.send_message(chat_id, response, reply_markup=markup)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        time.sleep(1)
        show_next_card(bot, message, db)